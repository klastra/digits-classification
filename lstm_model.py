# -*- coding: utf-8 -*-
"""Final - LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ssXB-D7dQNRMeYNtJpk3s0m3TLw1cYL-
"""

import tensorflow as tf
import numpy as np
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix
from keras.models import Sequential
from keras.layers import LSTM, Dense

#Load the dataset
digits = load_digits()
X = digits.data
Y = digits.target

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

#Preprocess dataset
X_train = X_train / 16.0
X_test = X_test / 16.0

X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))
X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))

#Build the LSTM model
model = Sequential()
model.add(LSTM(64, input_shape=(1, X_train.shape[2]))) #Tuning parameter
model.add(Dense(10, activation='softmax'))
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) #Tuning parameter
model.fit(X_train, y_train, epochs=100, batch_size=32, verbose=2) #Tuning parameter

#Evaluate model on test set
y_prediction_prob = model.predict(X_test)
y_prediction = np.argmax(y_prediction_prob, axis=1)
accuracy = accuracy_score(y_test, y_prediction)
conf_matrix = confusion_matrix(y_test, y_prediction)

#Print confusion matrix and accuracy 
print("Confusion Matrix:")
print(conf_matrix)
print("Accuracy: {:.2f}%".format(accuracy * 100))